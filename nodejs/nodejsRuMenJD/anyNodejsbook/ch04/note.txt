Node.js在网络和I/O操作中处理并发（或者一次做超过一件事情）有自己的做法，所推崇的是异步方式。

同步和阻塞可以互换，代码的执行会在函数返回之前停止，如果某个操作阻塞，那么脚本就无法继续。对最终用户而言，这意味着他们必须等待。
异步和非阻塞可以互换，指的是基于回调的，允许脚本并行执行操作的方法。脚本无需等待某个个操作的结果才能继续前进，因为操作结果会在事件发生时回调来处理，使用异步方法，操作无需一个接一个地发生。


事件循环
Node.js使用JavaScript的事件循环来支持它所推崇的异步编程。基本上，事件循环使得系统可以将回调函数先保存起来，而后当事件在将来发生时在运行。

这事件可以是数据库返回数据，也可以是HTTP请求返回数据。因为回调函数的执行被推迟到事件发生之后，于是就无需停止执行，控制流可以返回到Node运行时的环境，从而让其他事件发生。


编写将里面翻到外面的程序
将代码围绕着事件来构架而不是按照期待中的输入顺序来构架。

事件循环是以单一进程为基础，为了确保高性能，需要遵循：
函数必须快速返回。
函数不得阻塞。
长时间运行的操作必须转到另一个进程中。

因此，长时间运行的程序，处理大量数据，长时间运行计算，Node.js不适合。

Node.js旨在在网络中推送数据并瞬间完成！
